// <auto-generated />
using System;
using System.Net;
using Inventory.Infrastructure.Databases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Inventory.Infrastructure.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    [Migration("20201123172507_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.EntityFrameworkHiLoSequence", "'EntityFrameworkHiLoSequence', '', '1', '10', '', '', 'Int64', 'False'");

            modelBuilder.Entity("Inventory.Domain.Models.BaseDisk", b =>
                {
                    b.Property<int>("BaseDiskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Format")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ServerId")
                        .HasColumnType("integer");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.HasKey("BaseDiskId");

                    b.HasIndex("ServerId");

                    b.ToTable("BaseDisk");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseDisk");
                });

            modelBuilder.Entity("Inventory.Domain.Models.Environment", b =>
                {
                    b.Property<int>("EnvironmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EnvironmentFamilly")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("EnvironmentId");

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("Inventory.Domain.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("AnsibleGroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("GroupId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Inventory.Domain.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CityCode")
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Inventory.Domain.Models.OperatingSystem", b =>
                {
                    b.Property<int>("OperatingSystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Familly")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OperatingSystemId");

                    b.ToTable("OperatingSystems");
                });

            modelBuilder.Entity("Inventory.Domain.Models.Server", b =>
                {
                    b.Property<int>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("CPU")
                        .HasColumnType("integer");

                    b.Property<string>("HostName")
                        .HasColumnType("text");

                    b.Property<int>("OperatingSystemId")
                        .HasColumnType("integer");

                    b.Property<int>("RAM")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<IPAddress>("Subnet")
                        .IsRequired()
                        .HasColumnType("inet");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("ServerId");

                    b.HasIndex("HostName")
                        .IsUnique();

                    b.HasIndex("OperatingSystemId");

                    b.ToTable("Server");
                });

            modelBuilder.Entity("Inventory.Domain.Models.ServerEnvironment", b =>
                {
                    b.Property<int>("ServerId")
                        .HasColumnType("integer");

                    b.Property<int>("EnvironmentId")
                        .HasColumnType("integer");

                    b.HasKey("ServerId", "EnvironmentId");

                    b.HasIndex("EnvironmentId");

                    b.ToTable("ServerEnvironment");
                });

            modelBuilder.Entity("Inventory.Domain.Models.ServerGroup", b =>
                {
                    b.Property<int>("ServerId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.HasKey("ServerId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("ServerGroup");
                });

            modelBuilder.Entity("Inventory.Domain.Models.LinuxDisk", b =>
                {
                    b.HasBaseType("Inventory.Domain.Models.BaseDisk");

                    b.Property<string>("Datavg")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("LinuxDisk");
                });

            modelBuilder.Entity("Inventory.Domain.Models.WindowsDisk", b =>
                {
                    b.HasBaseType("Inventory.Domain.Models.BaseDisk");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<char>("Letter")
                        .HasColumnType("character(1)");

                    b.HasDiscriminator().HasValue("WindowsDisk");
                });

            modelBuilder.Entity("Inventory.Domain.Models.BaseDisk", b =>
                {
                    b.HasOne("Inventory.Domain.Models.Server", null)
                        .WithMany("ServerDisks")
                        .HasForeignKey("ServerId");
                });

            modelBuilder.Entity("Inventory.Domain.Models.Group", b =>
                {
                    b.HasOne("Inventory.Domain.Models.Group", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Inventory.Domain.Models.Server", b =>
                {
                    b.HasOne("Inventory.Domain.Models.OperatingSystem", "OperatingSystem")
                        .WithMany("Servers")
                        .HasForeignKey("OperatingSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Inventory.Domain.Models.ServerEnvironment", b =>
                {
                    b.HasOne("Inventory.Domain.Models.Environment", "Environment")
                        .WithMany("ServerEnvironments")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory.Domain.Models.Server", "Server")
                        .WithMany("ServerEnvironments")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Inventory.Domain.Models.ServerGroup", b =>
                {
                    b.HasOne("Inventory.Domain.Models.Group", "Group")
                        .WithMany("ServerGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory.Domain.Models.Server", "Server")
                        .WithMany("ServerGroups")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
