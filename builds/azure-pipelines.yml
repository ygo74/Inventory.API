variables:
  - group: Azure_Credential

stages:
- stage: BuildApplication
  displayName: Build Inventory Service
  jobs:
    - job: DotnetBuild
      displayName: Build Service
      steps:

        - task: DotNetCoreCLI@2
          displayName: Build Inventory.API.sln
          inputs:
            command: 'build'
            projects: 'Services/Inventory.API.sln'

    - job: DotnetTest
      displayName: Test Service
      dependsOn: DotnetBuild
      steps:

        - task: PowerShell@2
          displayName: 'Update AppSettings file before testing'
          inputs:
            targetType: 'inline'
            script: |
              $pathToJson = "Services/plugins/Inventory.Plugins.Azure.UnitTests/appsettings.json"
              $a = Get-Content $pathToJson | ConvertFrom-Json
              $a.Azure.ClientSecret = $env:VAR_CLIENT_SECRET
              $a.Azure.TenantId = $env:VAR_TENANT_ID
              $a.Azure.ClientId = $env:VAR_CLIENT_ID
              $a.Azure.SubscriptionId = $env:VAR_SUBSCRIPTION_ID
              $a | ConvertTo-Json | set-content $pathToJson
          env:
            VAR_CLIENT_SECRET: $(ClientSecret)
            VAR_TENANT_ID: $(TenantId)
            VAR_CLIENT_ID: $(ClientId)
            VAR_SUBSCRIPTION_ID: $(SubscriptionId)

        - task: DotNetCoreCLI@2
          displayName: Test Inventory.API.sln
          inputs:
            command: 'test'
            projects: 'Services/Inventory.API.sln'
            arguments: '--collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
            publishTestResults: true

        - task: PublishCodeCoverageResults@1
          displayName: 'Publish code coverage report'
          inputs:
            codeCoverageTool: 'Cobertura'
            summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

    - job: DockerBuild
      displayName: Build and publish docker images
      dependsOn:
        - DotnetBuild
        - DotnetTest
      variables:
        tag: $(Build.BuildId)
      steps:

        - task: Docker@2
          displayName: Build Inventory API Images
          inputs:
            containerRegistry: 'aksbootstrap'
            repository: 'DynamicInventory/InventoryAPI'
            command: 'build'
            Dockerfile: '**/Dockerfile'
            buildContext: '$(Build.SourcesDirectory)/Services'
            tags: |
              $(tag)

        - task: Docker@2
          displayName: Deploy image to mesfcontainerregistry
          inputs:
            containerRegistry: 'aksbootstrap'
            repository: 'DynamicInventory/InventoryAPI'
            command: 'push'
            tags: '$(tag)'


- stage: DeployApplication
  dependsOn:
    - BuildApplication

  jobs:
    - deployment: B1
      pool:
        vmImage: 'ubuntu-16.04'
      environment: env1
      strategy:
        runOnce:
          deploy:
            steps:
            - bash: echo $(myOutputVar)