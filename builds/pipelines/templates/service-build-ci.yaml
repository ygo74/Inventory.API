---
parameters:
  - name: serviceName
    type: string

  - name: projectPath
    type: string

  - name: testsProjectPath
    type: string

  - name: 'preTest'
    type: stepList
    default: []

  - name: dockerFile
    type: string

  - name: repositoryName
    type: string

  - name: chartPath
    type: string
    default: 'builds/kubernetes/charts'

  - name: chartName
    type: string

stages:

  # ---------------------------------------------------------------------------
  # Build and tests service
  # ---------------------------------------------------------------------------
  - stage: BuildApplication
    displayName: Build Service
    jobs:
      - job: DotnetBuild
        displayName: Build Service
        steps:
          - task: DotNetCoreCLI@2
            displayName: Build ${{ parameters.serviceName }}
            inputs:
              command: 'build'
              projects: '${{ parameters.projectPath }}'
              versioningScheme: byEnvVar
              versionEnvVar: 'version.semVer'


      - job: DotnetUnitTests
        displayName: Tests Service
        dependsOn:
          - DotnetBuild
        steps:
          - task: DotNetCoreCLI@2
            displayName: Install ReportGenerator Global Tool
            inputs:
              command:   custom
              custom:    tool
              arguments: install dotnet-reportgenerator-globaltool -g

          - script: echo "##vso[task.prependpath]$HOME/.dotnet/tools"
            displayName: 'Update PATH'

          - ${{ parameters.preTest }}

          - task: DotNetCoreCLI@2
            displayName: Test ${{ parameters.serviceName }}
            inputs:
              command:  'test'
              projects: '${{ parameters.testsProjectPath }}'
              arguments: >-
                --collect:"XPlat Code Coverage"
                -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.ExcludeByFile=**/*Migrations/*.cs
              publishTestResults: true

          - task: Bash@3
            displayName: 'Convert opencover to cobertura'
            inputs:
              targetType:       'inline'
              workingDirectory: '.'
              script: |
                reportgenerator "-reports:$(Agent.TempDirectory)/**/coverage.opencover.xml" \
                          "-targetDir:$(Build.SourcesDirectory)/TestResults/Coverage/cobertura/Reports" \
                          "-tag:$(Build.BuildNumber)" "-reportTypes:Cobertura" \
                          "-filefilters:-**/*Migrations/*.cs"

          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage report'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(Build.SourcesDirectory)/TestResults/Coverage/cobertura/Reports/**/*.xml'
              reportDirectory: '$(Build.SourcesDirectory)/TestResults/Coverage/cobertura/Reports'


  # ---------------------------------------------------------------------------
  # Build and tests service
  # ---------------------------------------------------------------------------

  - stage: BuildImages
    displayName: Build image and chart
    dependsOn:
      - BuildApplication

    jobs:
      - job: DockerBuild
        displayName: Build and publish docker images
        variables:
          tag: $(Build.BuildId)

        steps:

          - task: Docker@2
            displayName: Build ${{ parameters.serviceName }}
            inputs:
              containerRegistry: 'aksbootstrap'
              repository:        '${{ parameters.repositoryName }}'
              command:           'build'
              Dockerfile:        '${{ parameters.dockerFile }}'
              buildContext:      '$(Build.SourcesDirectory)/Services'
              tags: |
                $(tag)

          - task: Docker@2
            displayName: Deploy image to mesfcontainerregistry
            inputs:
              containerRegistry: 'aksbootstrap'
              repository:        '${{ parameters.repositoryName }}'
              command:           'push'
              tags: |
                $(tag)

      - job: HelmBuild
        displayName: Build and publish Helm chart
        dependsOn:
          - DockerBuild

        variables:
          tag: $(Build.BuildId)

        steps:
          - task: HelmInstaller@0
            displayName: Install Helm tools
            inputs:
              helmVersion: '3.8.0'
              checkLatestHelmVersion: false
              installKubectl: true
              kubectlVersion: '1.26.3'

          - task: HelmDeploy@0
            displayName: Package helm chart
            inputs:
              command:   'package'
              chartPath: '${{ parameters.chartPath}}/${{ parameters.chartName}}'

          - task: AzureCLI@2
            displayName: Save chart into ACR
            inputs:
              azureSubscription: 'Ansible-Automation'
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: |

                # Init User Name / token password
                $USER_NAME="00000000-0000-0000-0000-000000000000"
                $password=az acr login -n aksbootstrap --expose-token --output tsv --query accessToken

                # Push helm chart to registry
                helm registry login aksbootstrap.azurecr.io --username $USER_NAME --password $password
                helm push $(Build.ArtifactStagingDirectory)/${{ parameters.chartName}}-0.1.0.tgz oci://aksbootstrap.azurecr.io/helm/dynamic-inventory

              addSpnToEnvironment: true
              useGlobalConfig: true


