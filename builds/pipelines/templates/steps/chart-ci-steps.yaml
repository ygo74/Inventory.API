---
# -----------------------------------------------------------------------------
# Chart build
# -----------------------------------------------------------------------------
parameters:
  - name: serviceName
    type: string

  - name: chartPath
    type: string

  - name: chartName
    type: string

  - name: chartVersion
    type: string

  - name: containerRegistry
    type: string

  - name: containerRegistryFqdn
    type: string

  # - name: debugPipelineFlow
  #   type: boolean
  #   default: false

steps:

  - ${{ if eq(variables['System.debug'], 'true') }}:
    - task: Bash@3
      displayName: Display environment variables
      inputs:
        targetType: 'inline'
        script: |
          export

  - task: HelmInstaller@0
    displayName: Install Helm tools
    inputs:
      helmVersion:            '3.8.0'
      kubectlVersion:         '1.26.3'
      checkLatestHelmVersion: false
      installKubectl:         true

  - task: HelmDeploy@0
    displayName: Package helm chart
    inputs:
      command:      'package'
      chartPath:    '${{ parameters.chartPath}}/${{ parameters.chartName}}'
      chartVersion: '$(Build.BuildNumber)'

  - ${{ if or(eq(variables['Build.Reason'],'PullRequest'), startsWith(variables['Build.SourceBranch'],'refs/heads/master'), startsWith(variables['Build.SourceBranch'],'refs/heads/release/')) }}:
    - task: AzureCLI@2
      displayName: Deploy chart to ${{ parameters.containerRegistry }}
      condition: and(succeeded(),
                  or(
                    and(eq(variables['Build.Reason'],'PullRequest'), eq(variables['System.PullRequest.TargetBranchName'], 'master')),
                    startsWith(variables['Build.SourceBranch'],'refs/heads/master'),
                    startsWith(variables['Build.SourceBranch'],'refs/heads/release/')
                  )
                 )
      inputs:
        azureSubscription: 'Ansible-Automation'
        scriptType:        'pscore'
        scriptLocation:    'inlineScript'
        inlineScript: |
          # Init User Name / token password
          $USER_NAME="00000000-0000-0000-0000-000000000000"
          $password=az acr login -n ${{ parameters.containerRegistry }} --expose-token --output tsv --query accessToken

          # Push helm chart to registry
          helm registry login ${{ parameters.containerRegistryFqdn }} --username $USER_NAME --password $password
          helm push $(Build.ArtifactStagingDirectory)/${{ parameters.chartName }}-$(Build.BuildNumber).tgz oci://${{ parameters.containerRegistryFqdn }}/helm/dynamic-inventory

        addSpnToEnvironment: true
        useGlobalConfig: true
