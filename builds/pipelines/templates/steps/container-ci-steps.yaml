---
# -----------------------------------------------------------------------------
# Container build
# -----------------------------------------------------------------------------
parameters:
  - name: serviceName
    type: string

  - name: repositoryName
    type: string

  - name: dockerFile
    type: string

  - name: dockerTags
    type: string

  - name: containerRegistry
    type: string
    default: 'aksbootstrap'

  - name: containerRegistryFqdn
    type: string
    default: 'aksbootstrap.azurecr.io'

  - name: debugPipelineFlow
    type: boolean
    default: true

steps:

  - ${{ if parameters.debugPipelineFlow }}:
    - task: Bash@3
      displayName: Display environment variables
      inputs:
        targetType: 'inline'
        script: |
          export

  - task: Docker@2
    displayName: Build ${{ parameters.serviceName }}
    inputs:
      containerRegistry: '${{ parameters.containerRegistry }}'
      repository:        '${{ parameters.repositoryName }}'
      command:           'build'
      Dockerfile:        '${{ parameters.dockerFile }}'
      buildContext:      '$(Build.SourcesDirectory)/Services'
      tags: |
        ${{ parameters.dockerTags }}

  - task: Bash@3
    displayName: Display environment variables
    inputs:
      targetType: 'inline'
      script: |
        docker images

  - task: AzureCLI@2
    displayName: Log to registry ${{ parameters.containerRegistry }}
    inputs:
      azureSubscription: 'Ansible-Automation'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      addSpnToEnvironment: true
      useGlobalConfig: true
      inlineScript: |

        # Log to registry
        az acr login --name  ${{ parameters.containerRegistry }}

  - task: SnykSecurityScan@1
    inputs:
      serviceConnectionEndpoint: 'Snyk'
      testType:                  'container'
      dockerImageName:           '${{ parameters.containerRegistryFqdn }}/${{ parameters.repositoryName }}:${{ parameters.dockerTags }}'
      dockerfilePath:            '${{ parameters.dockerFile }}'
      severityThreshold:         'high'
      monitorWhen:               'always'
      failOnIssues:              true
      projectName:               '${{ parameters.repositoryName }}'
      organization:              'ygo74'

  - ${{ if or(eq(variables['Build.Reason'],'PullRequest'), startsWith(variables['Build.SourceBranch'],'refs/heads/master'), startsWith(variables['Build.SourceBranch'],'refs/heads/release/')) }}:
    - task: Docker@2
      displayName: Deploy image to ${{ parameters.containerRegistry }}
      condition: and(succeeded(),
                  or(
                    and(eq(variables['Build.Reason'],'PullRequest'), eq(variables['System.PullRequest.TargetBranchName'], 'master')),
                    startsWith(variables['Build.SourceBranch'],'refs/heads/master'),
                    startsWith(variables['Build.SourceBranch'],'refs/heads/release/')
                  )
                 )
      inputs:
        containerRegistry: '${{ parameters.containerRegistry }}'
        repository:        '${{ parameters.repositoryName }}'
        command:           'push'
        tags: |
          ${{ parameters.dockerTags }}
