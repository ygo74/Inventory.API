---
# -----------------------------------------------------------------------------
# Deploy Database
# -----------------------------------------------------------------------------
parameters:
  - name: aksResourceGroup
    type: string

  - name: aksName
    type: string

  - name: serviceName
    type: string

  - name: databaseName
    type: string

  - name: databaseUserName
    type: string

  - name: databaseUserPassword
    type: string

  - name: resourcePipelineId
    type: int
    default: 0

  - name: debugPipelineFlow
    type: boolean
    default: true


steps:
  - ${{ if parameters.debugPipelineFlow }}:
    - task: Bash@3
      displayName: Display environment variables
      inputs:
        targetType: 'inline'
        script: |
          export

    - task: Bash@3
      displayName: Display resources pipeline variables
      inputs:
        targetType: 'inline'
        script: |
          echo $(resources.pipeline.configuration-api-ci.pipelineID)
          echo $(resources.pipeline.configuration-api-ci.runName)
          echo $(resources.pipeline.configuration-api-ci.runID)
          echo $(resources.pipeline.configuration-api-ci.runURI)
          echo $(resources.pipeline.configuration-api-ci.sourceBranch)
          echo $(resources.pipeline.configuration-api-ci.sourceCommit)
          echo $(resources.pipeline.configuration-api-ci.sourceProvider)
          echo $(resources.pipeline.configuration-api-ci.requestedFor)
          echo $(resources.pipeline.configuration-api-ci.requestedForID)

  - checkout: self
    displayName: "Checkout repository"

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'specific'
      # project: 'fa79f165-cc7b-4aaa-bb4f-ed39e9bd257c'
      project: '$(System.TeamProjectId)'
      definition: '${{ parameters.resourcePipelineId }}'
      specificBuildWithTriggering: true
      buildVersionToDownload: 'latest'
      allowPartiallySucceededBuilds: true
      artifactName: 'SQLScripts'
      targetPath: '$(Pipeline.Workspace)'

  - task: AzureCLI@2
    displayName: "Copy databases script files"
    inputs:
      azureSubscription: 'Ansible-Automation'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Get credentials
        az aks get-credentials --resource-group ${{ parameters.aksResourceGroup }} --name ${{ parameters.aksName }} --admin

        # Copy files to pods
        if (Test-Path -Path "./databases/${{ parameters.serviceName }}/createUsers.sql" -PathType Leaf)
        {
          echo "Database ${{ parameters.serviceName }} has a createUsers sql script"
          kubectl cp ./databases/${{ parameters.serviceName }}/createUsers.sql  postgresql-0:/tmp/createUsers.sql -c postgresql -n postgresql
          echo "##vso[task.setvariable variable=hasCreateUsers]$true"
        }

        if (-not(Test-Path -Path "$(Pipeline.Workspace)/${{ parameters.serviceName }}.sql" -PathType Leaf))
        {
          echo "##[error]Database ${{ parameters.serviceName }} has no sql script"
          exit 1
        }
        kubectl cp $(Pipeline.Workspace)/${{ parameters.serviceName }}.sql  postgresql-0:/tmp/${{ parameters.serviceName }}.sql -c postgresql -n postgresql


        if (Test-Path -Path "./databases/${{ parameters.serviceName }}/grantUsers.sql" -PathType Leaf)
        {
          echo "Database ${{ parameters.serviceName }} has a grantUsers sql script"
          kubectl cp ./databases/${{ parameters.serviceName }}/grantUsers.sql  postgresql-0:/tmp/grantUsers.sql -c postgresql -n postgresql
          echo "##vso[task.setvariable variable=hasGrantUsers]$true"
        }



  - task: Kubernetes@1
    displayName: "Create User"
    condition: and(succeeded(), eq( variables[ 'hasCreateUsers' ], 'True') )
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: 'Ansible-Automation'
      azureResourceGroup: '${{ parameters.aksResourceGroup }}'
      kubernetesCluster: '${{ parameters.aksName }}'
      namespace: 'postgresql'
      command: 'exec'
      arguments: >-
        postgresql-0 -c postgresql -n postgresql
        -- psql postgresql://inventorydb-admin:$(inventorydb-admin)@postgresql/${{ parameters.databaseName }}
        -f /tmp/createUsers.sql

  - task: Kubernetes@1
    displayName: "Set User password"
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: 'Ansible-Automation'
      azureResourceGroup: '${{ parameters.aksResourceGroup }}'
      kubernetesCluster: '${{ parameters.aksName }}'
      namespace: 'postgresql'
      command: 'exec'
      arguments: >-
        postgresql-0 -c postgresql -n postgresql
        -- psql postgresql://inventorydb-admin:$(inventorydb-admin)@postgresql/${{ parameters.databaseName }}
        -c "ALTER USER ${{ parameters.databaseUserName }} WITH PASSWORD '${{ parameters.databaseUserPassword }}'"
    env:
      USER_PASSWORD: '${{ parameters.databaseUserPassword }}'

  - task: Kubernetes@1
    displayName: "Create Database objects"
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: 'Ansible-Automation'
      azureResourceGroup: '${{ parameters.aksResourceGroup }}'
      kubernetesCluster: '${{ parameters.aksName }}'
      namespace: 'postgresql'
      command: 'exec'
      arguments: >-
        postgresql-0 -c postgresql -n postgresql
        -- psql postgresql://inventorydb-admin:$(inventorydb-admin)@postgresql/${{ parameters.databaseName }}
        -f /tmp/${{ parameters.serviceName }}.sql

  - task: Kubernetes@1
    displayName: "Grant users to Database objects"
    condition: and(succeeded(), eq( variables[ 'hasGrantUsers' ], 'True') )
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: 'Ansible-Automation'
      azureResourceGroup: '${{ parameters.aksResourceGroup }}'
      kubernetesCluster: '${{ parameters.aksName }}'
      namespace: 'postgresql'
      command: 'exec'
      arguments: >-
        postgresql-0 -c postgresql -n postgresql
        -- psql postgresql://inventorydb-admin:$(inventorydb-admin)@postgresql/${{ parameters.databaseName }}
        -f /tmp/grantUsers.sql
