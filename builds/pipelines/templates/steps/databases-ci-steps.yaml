---
# -----------------------------------------------------------------------------
# Database scripts generation
# -----------------------------------------------------------------------------

parameters:
  - name: serviceName
    type: string

  - name: projectPath
    type: string

  - name: infrastructureProjectPath
    type: string

  # - name: debugPipelineFlow
  #   type: boolean
  #   default: false

steps:
  - ${{ if eq(variables['system.debug'], 'true') }}:
    - task: Bash@3
      displayName: Display environment variables
      inputs:
        targetType: 'inline'
        script: |
          export

  - task: DotNetCoreCLI@2
    displayName: Install EF Tool
    inputs:
      command: custom
      custom: 'tool '
      arguments: install dotnet-ef -g --version 7.0.15

  - script: echo "##vso[task.prependpath]$HOME/.dotnet/tools"
    displayName: 'Update PATH'

  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
      command: restore
      projects: ${{ parameters.projectPath }}

  - task: DotNetCoreCLI@2
    displayName: Create SQL Scripts for ${{ parameters.serviceName }}
    inputs:
      command: custom
      custom: 'ef '
      arguments: >-
        migrations script --output $(Build.ArtifactStagingDirectory)/${{ parameters.serviceName }}.sql
        --idempotent
        --startup-project ${{ parameters.projectPath }}
        --project ${{ parameters.infrastructureProjectPath }}

  - ${{ if or(not(or(startsWith(variables['Build.SourceBranch'],'refs/heads/feature/'), startsWith(variables['Build.SourceBranch'],'refs/heads/topic/'), startsWith(variables['Build.SourceBranch'],'refs/heads/hotfix/'))), and(eq(variables['Build.Reason'],'PullRequest'), eq(variables['System.PullRequest.TargetBranchName'], 'master'))) }}:
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: SQLScripts'
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)/${{ parameters.serviceName }}.sql
        ArtifactName: SQLScripts

  # - task: UniversalPackages@0
  #   displayName: 'Publish Artifact: SQLScripts'
  #   inputs:
  #     command: 'publish'
  #     publishDirectory: '$(Build.ArtifactStagingDirectory)'
  #     feedsToUsePublish: 'internal'
  #     vstsFeedPublish: 'fa79f165-cc7b-4aaa-bb4f-ed39e9bd257c/c29d8a1f-a53c-4040-88b1-1bf15ee2001c'
  #     vstsFeedPackagePublish: 'configuration-api-sql'
  #     versionOption: 'custom'
  #     versionPublish: '1.0.0'
  #     verbosity: 'Information'
  #     publishedPackageVar: 'upload-sql'
