---
# -----------------------------------------------------------------------------
# Dotnet build
# -----------------------------------------------------------------------------
parameters:
  - name: serviceName
    type: string

  - name: projectPath
    type: string

  - name: debugPipelineFlow
    type: boolean
    default: true

steps:
  - ${{ if parameters.debugPipelineFlow }}:
    - task: Bash@3
      displayName: Display environment variables
      inputs:
        targetType: 'inline'
        script: |
          export

  - task: MicrosoftSecurityDevOps@1
    displayName: 'Microsoft Security DevOps'
    # inputs:
    # command: 'run' | 'pre-job' | 'post-job'. Optional. The command to run. Default: run
    # config: string. Optional. A file path to an MSDO configuration file ('*.gdnconfig').
    # policy: 'azuredevops' | 'microsoft' | 'none'. Optional. The name of a well-known Microsoft policy. If no configuration file or list of tools is provided, the policy may instruct MSDO which tools to run. Default: azuredevops.
    # categories: string. Optional. A comma-separated list of analyzer categories to run. Values: 'secrets', 'code', 'artifacts', 'IaC', 'containers. Example: 'IaC,secrets'. Defaults to all.
    # languages: string. Optional. A comma-separated list of languages to analyze. Example: 'javascript,typescript'. Defaults to all.
    # tools: string. Optional. A comma-separated list of analyzer tools to run. Values: 'bandit', 'binskim', 'eslint', 'templateanalyzer', 'terrascan', 'trivy'.
    # break: boolean. Optional. If true, will fail this build step if any error level results are found. Default: false.
    # publish: boolean. Optional. If true, will publish the output SARIF results file to the chosen pipeline artifact. Default: true.
    # artifactName: string. Optional. The name of the pipeline artifact to publish the SARIF result file to. Default: CodeAnalysisLogs*.

  - task: PowerShell@2
    displayName: Set project directory path
    inputs:
      targetType: 'inline'
      script: |
        # Get project directory path
        $projectPath = "${{ parameters.projectPath }}"
        $directoryPath = Get-Item -Path $projectPath | Select-Object -ExpandProperty Directory | Resolve-Path | Select-Object -ExpandProperty Path
        echo "Project directory path : $directoryPath"
        echo "##vso[task.setvariable variable=directoryPath]$directoryPath"

      failOnStderr: true
      pwsh: true

  - task: DotNetCoreCLI@2
    displayName: Build ${{ parameters.serviceName }}
    inputs:
      command: 'build'
      projects: '${{ parameters.projectPath }}'
      versioningScheme: byEnvVar
      versionEnvVar: 'CalculateNextVersion.NEW_VERSION'

  - task: SnykSecurityScan@1
    inputs:
      serviceConnectionEndpoint: 'Snyk'
      testType:                  'app'
      severityThreshold:         'high'
      monitorWhen:               'always'
      failOnIssues:              true
      projectName:               '${{ parameters.serviceName }}'
      organization:              'ygo74'
      testDirectory:             '$(directoryPath)'

  - ${{ if or(not(or(startsWith(variables['Build.SourceBranch'],'refs/heads/feature/'), startsWith(variables['Build.SourceBranch'],'refs/heads/topic/'), startsWith(variables['Build.SourceBranch'],'refs/heads/hotfix/'))), and(eq(variables['Build.Reason'],'PullRequest'), eq(variables['System.PullRequest.TargetBranchName'], 'master'))) }}:
    - task: DotNetCoreCLI@2
      displayName: Publish ${{ parameters.serviceName }}
      inputs:
        command: 'publish'
        projects: '${{ parameters.projectPath }}'
        publishWebProjects: false
        versioningScheme: byEnvVar
        versionEnvVar: 'CalculateNextVersion.NEW_VERSION'
        arguments: '-o $(Build.ArtifactStagingDirectory)/services/${{ parameters.serviceName }}'
        zipAfterPublish: true
        modifyOutputPath: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: ${{ parameters.serviceName }}'
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)/services/${{ parameters.serviceName }}
        ArtifactName: Service
